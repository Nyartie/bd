import asyncio
import logging
import re
from typing import Optional, Dict, Any

import bcrypt
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage

from config import Config
from database import Database
from queries import SQL
from utils import (
    generate_rental_report,
    generate_analytics_chart,
    cleanup_temp_files,
    validate_phone_number,
    format_rental_details,
    format_currency
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=Config.SECRET_KEY,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())
db = Database()


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class RegistrationStates(StatesGroup):
    email = State()
    password = State()
    phone = State()


class RentalStates(StatesGroup):
    select_size = State()
    confirm_rental = State()


class ReturnStates(StatesGroup):
    select_rental = State()


# ------------------------ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ------------------------
def main_menu_kb() -> types.ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üèí –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å"),
        types.KeyboardButton(text="üìã –ú–æ–∏ –∞—Ä–µ–Ω–¥—ã")
    )
    builder.row(
        types.KeyboardButton(text="üìä –û—Ç—á–µ—Ç—ã"),
        types.KeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    )
    return builder.as_markup(resize_keyboard=True)


def sizes_keyboard(sizes: list) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    for size in sizes:
        builder.button(text=str(size['size']), callback_data=f"size_{size['size']}")
    builder.adjust(4)
    return builder.as_markup()


# ------------------------ –•—ç–Ω–¥–ª–µ—Ä—ã ------------------------
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    user = await db.get_user_by_tg_id(message.from_user.id)

    if user:
        await message.answer(
            "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π:",
            reply_markup=main_menu_kb()
        )
        return

    await message.answer(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞—Ä–µ–Ω–¥—ã –∫–æ–Ω—å–∫–æ–≤!\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"
    )
    await state.set_state(RegistrationStates.email)


@dp.message(RegistrationStates.email)
async def process_email(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    email = message.text.strip().lower()

    if not re.match(r"^[\w\.-]+@[\w\.-]+\.\w+$", email):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    if await db.fetchrow(SQL.CHECK_EMAIL_EXISTS, email):
        await message.answer("‚ùå –≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return

    await state.update_data(email=email)
    await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(RegistrationStates.password)


@dp.message(RegistrationStates.password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text.strip()

    if len(password) < 6:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(password=password)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:")
    await state.set_state(RegistrationStates.phone)


@dp.message(RegistrationStates.phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()

    if not validate_phone_number(phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    data = await state.get_data()
    hashed_pwd = bcrypt.hashpw(data['password'].encode(), bcrypt.gensalt()).decode()

    try:
        await db.execute(
            SQL.REGISTER_USER,
            message.from_user.id,
            data['email'],
            phone,
            hashed_pwd,
            message.from_user.full_name
        )
        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π:",
            reply_markup=main_menu_kb()
        )
    except Exception as e:
        logger.error(f"Registration error: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()


@dp.message(F.text == "üèí –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å")
async def start_rental_process(message: types.Message, state: FSMContext):
    sizes = await db.fetch(SQL.GET_AVAILABLE_SIZES)

    if not sizes:
        await message.answer("üòî –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—å–∫–æ–≤.")
        return

    await message.answer("üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—å–∫–æ–≤:",
                         reply_markup=sizes_keyboard(sizes))
    await state.set_state(RentalStates.select_size)


@dp.callback_query(RentalStates.select_size, F.data.startswith("size_"))
async def process_size_selection(callback: types.CallbackQuery, state: FSMContext):
    size = int(callback.data.split("_")[1])
    inventory = await db.fetch(SQL.GET_AVAILABLE_INVENTORY, size)

    if not inventory:
        await callback.message.edit_text("üòî –≠—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        await state.clear()
        return

    await state.update_data(size_id=inventory[0]['size_id'])
    await callback.message.edit_text(
        f"üîç –ù–∞–π–¥–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n"
        f"‚Ä¢ –ú–æ–¥–µ–ª—å: {inventory[0]['brand']} {inventory[0]['model_name']}\n"
        f"‚Ä¢ –†–∞–∑–º–µ—Ä: {size}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∞—Ä–µ–Ω–¥—É?",
        reply_markup=InlineKeyboardBuilder()
        .button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")
        .button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        .as_markup()
    )
    await state.set_state(RentalStates.confirm_rental)


@dp.callback_query(RentalStates.confirm_rental, F.data == "confirm")
async def confirm_rental(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = await db.get_user_by_tg_id(callback.from_user.id)

    try:
        rental_id = await db.execute(
            SQL.CREATE_RENTAL,
            user['id'],
            data['size_id'],
            Config.DEFAULT_HOURLY_RATE
        )
        await callback.message.edit_text(
            "üéâ –ê—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {Config.DEFAULT_HOURLY_RATE}/—á–∞—Å",
            reply_markup=main_menu_kb()
        )
        await log_action(user['id'], 'rent_start', f"Rental #{rental_id}")
    except Exception as e:
        logger.error(f"Rental error: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã.")

    await state.clear()


@dp.message(F.text == "üìã –ú–æ–∏ –∞—Ä–µ–Ω–¥—ã")
async def show_active_rentals(message: types.Message):
    user = await db.get_user_by_tg_id(message.from_user.id)
    rentals = await db.fetch(SQL.GET_ACTIVE_RENTALS, user['id'])

    if not rentals:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥.")
        return

    response = ["üî∑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã:\n"]
    for idx, rent in enumerate(rentals, 1):
        response.append(
            f"{idx}. {rent['brand']} {rent['size']}\n"
            f"   –ù–∞—á–∞–ª–æ: {rent['start_time'].strftime('%d.%m %H:%M')}\n"
            f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {format_currency(rent.get('total_cost', 0))}"
        )

    await message.answer("\n".join(response),
                         reply_markup=InlineKeyboardBuilder()
                         .button(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—å–∫–∏", callback_data="return_skates")
                         .as_markup()
                         )


@dp.message(F.text == "üìä –û—Ç—á–µ—Ç—ã")
async def generate_reports(message: types.Message):
    try:
        # CSV –æ—Ç—á–µ—Ç
        csv_report = await generate_rental_report(message.from_user.id)
        await message.answer_document(
            types.BufferedInputFile(csv_report.read(), "rental_report.csv"),
            caption="üìä –û—Ç—á–µ—Ç –ø–æ –∞—Ä–µ–Ω–¥–∞–º"
        )

        # –ì—Ä–∞—Ñ–∏–∫
        chart = await generate_analytics_chart()
        await message.answer_photo(
            types.BufferedInputFile(chart.read(), "popularity_chart.png"),
            caption="üìà –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–æ–≤"
        )

        # –û—á–∏—Å—Ç–∫–∞
        csv_report.close()
        chart.close()
        await cleanup_temp_files()

    except Exception as e:
        logger.error(f"Report generation error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")


# ------------------------ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ------------------------
async def log_action(user_id: int, action_type: str, details: str):
    await db.execute(
        SQL.LOG_ACTION,
        user_id,
        action_type,
        details
    )


async def on_startup():
    await db.connect()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    logger.info("Database initialized")
    await cleanup_temp_files()


async def on_shutdown():
    await db.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    logger.info("Database connection closed")


async def main():
    await on_startup()  # –Ø–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º on_startup
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
